limit_req_zone $binary_remote_addr zone=socketiolimit:10m rate=5r/s;
upstream sl-api-backend {
    ip_hash;
    server localhost:3030;
}
server {
    server_name api.stoplight.example.com;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_certificate /etc/ssl/example.cert;
    ssl_certificate_key /etc/ssl/example.key;
    ssl_session_cache shared:SSL:20m;
    ssl_session_timeout 60m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    server_tokens off;
    location / {
        gzip off;
        proxy_set_header Host                $http_host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-Ssl     on;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;
        proxy_pass http://sl-api-backend;
    }
    location /socket.io {
        gzip off;
        proxy_set_header Host                $http_host;
        proxy_set_header X-Real-IP           $remote_addr;
        proxy_set_header X-Forwarded-Ssl     on;
        proxy_set_header X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto   $scheme;
        proxy_set_header Upgrade             $http_upgrade;
        proxy_set_header Connection          "upgrade";
        proxy_http_version 1.1;
        limit_req zone=socketiolimit burst=5 nodelay;
        if ( $args ~ "transport=polling" ) {
            return 403;
        }
        proxy_pass http://sl-api-backend;
    }
}
server {
    server_name api.stoplight.example.com;
    listen 80;
    location / {
        return 301 https://$server_name$request_uri;
    }
}
